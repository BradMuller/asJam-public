package  {		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.display.DisplayObject;		public class SkillGame extends MovieClip {				private var SKILL_POINTS_PER_DAY:int = (60*60*24);				private var skillsScrollList:ScrollList;		private var queuedSkillsScrollList:ScrollList;		private var queueIndicator:QueueIndicator;				private var SKILLS:Array = [			{name: "Gunnery", skills: [				{name: "Controlled Bursts", skillPointsTrained: 0, skillPointsTotal: 6500},				{name: "Rapid Firing", skillPointsTrained: 1500, skillPointsTotal: 12500}			]},			{name: "Missiles", skills: [				{name: "Rockets", skillPointsTrained: 0, skillPointsTotal: 24000},				{name: "Torpedoes", skillPointsTrained: 0, skillPointsTotal: 6500}			]},			{name: "Navigation", skills: [				{name: "Afterburner", skillPointsTrained: 0, skillPointsTotal: 48000},				{name: "Warp Drive Operation", skillPointsTrained: 0, skillPointsTotal: 1024000}			]},			{name: "Science", skills: [				{name: "Cybernetics", skillPointsTrained: 0, skillPointsTotal: 16800},				{name: "Metallurgy", skillPointsTrained: 0, skillPointsTotal: 32800},				{name: "Astrometrics", skillPointsTrained: 20, skillPointsTotal: 42000}			]}		];				public function SkillGame() {			// constructor code						skillsScrollList = new ScrollList();			this.skillMenu.addChild( skillsScrollList );						var yOffset:int = 0;			var i:int;			for( i = 0; i < SKILLS.length; i++ ){				var skillModel:Object = SKILLS[i];				var container:Sprite = makeSkillView( skillModel );				container.y = yOffset;				skillsScrollList.addChild( container );				yOffset += container.height;			}			var skillCategory:SkillCategory = new SkillCategory();						this.skillMenu.addEventListener( "toggleTab", toggleTab );									this.queueIndicator = new QueueIndicator();						this.queuedSkillsScrollList = new ScrollList();			this.skillQueue.addChild( queuedSkillsScrollList );						setupQueueScrollList();		}				private function pruneQueuedSkills():void{			var skillPointsEncountered:int = 0;			for( var i:int = 0; i < QUEUED_SKILLS.length; i++ ){				var skillModel:Object = QUEUED_SKILLS[i];				if( skillPointsEncountered > SKILL_POINTS_PER_DAY ){					QUEUED_SKILLS.splice(i, QUEUED_SKILLS.length - i);					return;				}				skillPointsEncountered += (skillModel.skillPointsTotal - skillModel.skillPointsTrained);			}		}				private function setupQueueScrollList():void{			while( queuedSkillsScrollList.numChildren > 0 ){				queuedSkillsScrollList.removeChildAt(0);			}						var yOffset:int = 0;			var skillPointsConsumed:int = 0;			for( var i = 0; i < QUEUED_SKILLS.length; i++ ){				var queuedSkillModel:Object = QUEUED_SKILLS[i];								var queuedSkillView:QueuedSkill = new QueuedSkill();								var oneDayWidth:int = queuedSkillView.width;				queuedSkillView.title.text = queuedSkillModel.name;				queuedSkillView.progressBar.x = (skillPointsConsumed/SKILL_POINTS_PER_DAY)*oneDayWidth;				var remainingSkillPoints:int = (queuedSkillModel.skillPointsTotal - queuedSkillModel.skillPointsTrained);				queuedSkillView.progressBar.width = (remainingSkillPoints/SKILL_POINTS_PER_DAY )*oneDayWidth;				queuedSkillView.trainingTime.text = timeAsString( remainingSkillPoints );								skillPointsConsumed += remainingSkillPoints								queuedSkillView.y = yOffset;				queuedSkillsScrollList.addChild( queuedSkillView );								yOffset += queuedSkillView.height;			}		}				private function timeAsString( seconds:int ):String{			var remainingSeconds = seconds;			var days:int = Math.floor(remainingSeconds / (60*60*24));						remainingSeconds -= days*(60*60*24);			var hours:int = Math.floor(remainingSeconds / (60*60));						remainingSeconds -= hours*(60*60);			var minutes:int = Math.floor(remainingSeconds / (60));						remainingSeconds -= minutes*(60);			var seconds = remainingSeconds;						var parts:Array = [];			if( days > 0 ){				parts.push( (days + 'd') );			}			if( hours > 0 ){				parts.push( (hours + 'h') );			}			if( minutes > 0 ){				parts.push( (minutes + 'm') );			}			if( seconds > 0 ){				parts.push( (seconds + 's') );			}			return parts.join(", ");		}				private function toggleTab( event:Event ):void{			var skillCategory:MovieClip = event.target as MovieClip;						var skillsContainer:Sprite = skillCategory.skillsContainer as Sprite;			var diff:int						if( skillCategory.contains( skillsContainer ) ){				skillCategory.removeChild( skillsContainer );				diff = -skillsContainer.height;			}else{				skillCategory.addChild( skillsContainer );				diff = skillsContainer.height;			}			for( var i:int = this.skillsScrollList.getChildIndex( skillCategory ) + 1; i < this.skillsScrollList.numChildren; i++ ){				var child:Sprite = this.skillsScrollList.getChildAt( i ) as Sprite;				child.y += diff;			}		}				private function makeSkillView( skillModel:Object ):MovieClip{			var skillView = new SkillCategory();			skillView.title.text = skillModel.name;						var container:MovieClip = new MovieClip();			container.addChild( skillView );						skillView.addEventListener( MouseEvent.MOUSE_UP, function(event){				container.dispatchEvent( new Event("toggleTab", true) );			});						var skillsContainer:Sprite = new Sprite();			container.skillsContainer = skillsContainer;			var yOffset:int = 0;			skillModel.skills.forEach( function(subSkillModel:Object, i:int, arr:Array){  				var subSkillView = new Skill();				subSkillView.title.text = subSkillModel.name;				//subSkillView.description.text = subSkillModel.description;				skillsContainer.addChild( subSkillView );				subSkillView.y = yOffset;				yOffset += subSkillView.height;								var inputBeginCoords:Point;				var dragged:Boolean;				var ghost:Skill;				function onInputBegin(event:MouseEvent):void{					inputBeginCoords = new Point( event.stageX, event.stageY );					dragged = false;										stage.addEventListener( MouseEvent.MOUSE_MOVE, onInputMove );					stage.addEventListener( MouseEvent.MOUSE_UP, onInputEnd, true );				}								function onInputMove(event:MouseEvent):void{					var tempCoords:Point = new Point( event.stageX, event.stageY );					var delta:Point = tempCoords.subtract( inputBeginCoords );					if( !dragged ){						if( Math.abs( delta.x ) > 100 ){							dragged = true;							ghost = new Skill();							ghost.title.text = subSkillView.title.text;														stage.addEventListener( MouseEvent.MOUSE_MOVE, onInputMove, true );							stage.addChild( ghost );														queuedSkillsScrollList.addChild( queueIndicator );						}else{							return;						}					}else{						event.stopImmediatePropagation();											}										ghost.x = tempCoords.x;					ghost.y = tempCoords.y;										var idx:int = getSkillIndex( tempCoords );					var numQueuedSkills = QUEUED_SKILLS.length;					if( numQueuedSkills === 0 ){						queueIndicator.y = 0;					}else if( idx >= numQueuedSkills ){						var last = queuedSkillsScrollList.getChildAt( idx - 1 );						queueIndicator.y = last.y + last.height;					}else{						var child = queuedSkillsScrollList.getChildAt( idx );						queueIndicator.y = child.y;					}				}								function onInputEnd(event:MouseEvent):void{					if( dragged ){						stage.removeChild( ghost );						ghost = null;						event.stopPropagation();						queuedSkillsScrollList.removeChild( queueIndicator );												// Insert skill						var tempCoords:Point = new Point(event.stageX, event.stageY);						var idx:int = getSkillIndex( tempCoords );						QUEUED_SKILLS.splice( idx, 0, subSkillModel );												pruneQueuedSkills();						setupQueueScrollList();					}										stage.removeEventListener( MouseEvent.MOUSE_MOVE, onInputMove );					stage.removeEventListener( MouseEvent.MOUSE_MOVE, onInputMove, true );					stage.removeEventListener( MouseEvent.MOUSE_UP, onInputEnd, true );				}								subSkillView.addEventListener( MouseEvent.MOUSE_DOWN, onInputBegin );			});						skillsContainer.y = container.height;			container.addChild( skillsContainer );						return container;		}				private function getSkillIndex( tempCoords:Point ):int{			var i:int = 0;			for( i = 0; i < queuedSkillsScrollList.numChildren - 1; i++ ){				var child:Sprite = queuedSkillsScrollList.getChildAt(i) as Sprite;				if( !child )					continue;									var bounds:Rectangle = child.getBounds( stage );				if( tempCoords.y > bounds.bottom ){					continue;				}								if( tempCoords.y < (bounds.top + bounds.height/2) ){					return i;				}				return i+1;			}			return i;		}				private var QUEUED_SKILLS:Array = [			{name: "Rapid Firing", skillPointsTrained: 1500, skillPointsTotal: 12500 },			{name: "Astrometrics", skillPointsTrained: 20, skillPointsTotal: 42000 },			{name: "Torpedoes", skillPointsTrained: 0, skillPointsTotal: 6500 },			{name: "Warp Drive Operation", skillPointsTrained: 0, skillPointsTotal: 1024000}		];					}	}